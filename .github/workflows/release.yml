name: Package Releases

on:
  push:
    branches: [master]
    tags: ["*"]
  pull_request:
    branches: [master]

jobs:
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Extract Flags
        id: flags
        run: |
          echo ::set-output name=tag::${GITHUB_REF##*/}

      - name: Remove Unused Code
        run: |
          # Remove hundreds of MBs of unused third_party code.
          find ./alephzero/third_party \
              -type f \
              ! -wholename './alephzero/third_party/yyjson/src/*' \
              ! -wholename './alephzero/third_party/json/single_include/nlohmann/*' \
              -delete

          while [[ $(find ./alephzero/third_party -empty -type d) ]]; do
              find ./alephzero/third_party -empty -type d -delete
          done

          # We've removed doctest and picobench, so no point keeping C++ unit tests.
          rm -rf ./alephzero/src/bench ./alephzero/src/test

          # Drop git history.
          rm -rf ./.git alephzero/.git

      - name: Archive Source
        run: |
          mkdir archives

          tar --exclude=./archives -czvf ./archives/alephzero.tar.gz .
          zip -x ./archives -r ./archives/alephzero.zip .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./archives/alephzero.tar.gz
          asset_name: alephzero-${{ steps.flags.outputs.tag }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./archives/alephzero.zip
          asset_name: alephzero-${{ steps.flags.outputs.tag }}.zip
          asset_content_type: application/zip

  pip:
    name: Send to PyPI
    if: startsWith(github.ref, 'refs/tags')

    runs-on: ubuntu-latest
    container:
      image: "quay.io/pypa/manylinux_2_24_x86_64"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: install apt deps
        run: apt update && apt install -y python3-pip

      - name: install pip deps
        run: python3 -m pip install -U build pybind11 setuptools twine virtualenv wheel

      - name: build package
        run: python3 -m build

      - name: auditwheel
        run: |
          for whl in dist/*-linux_x86_64.whl; do
            auditwheel repair "$whl" -w dist/
          done
          rm dist/*-linux_x86_64.whl

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
